%% tab2mat_trial
% 
clear
close all
monkey_let='h';
if monkey_let=='h'
    base='..\..\data\HugoData-CtxThl\';
    table_file=[base '\Hugo_ThalCtx_offline_table.mat'];
    indir=[base '\all_MergedEdFiles\'];
    output_dir=[base '\results\'];

elseif monkey_let=='y'
    base='G:\users\ream\Prut\Yolanda\Data\YolandaData\';
    table_file=[base '\Yolanda_Offline.mat'];
    indir=[base '\y150212\MergedEdFiles\'];
    output_dir=[base '\..\..\results\'];
else
    error('Monkey letter %s not found',monkey_let)
end
load(table_file,'table');

%% parameters used:
% Time window for spike counts for calculating PD:
PDmin=100;
PDmax=500;
% Time window for correlation (JPSTH) calculation
Tmin=-1000;
Tmax=1000;



ev2take='to';%event for JPSTH caluclation
min_fr=0.5; %cutoff firing rate (under which JPASTHs are unstable)
min_trial_num = 40; %cuttoff trial for JPSTHs (under which JPSTH might be unstable)
bin_size=100; %bin size for JPSTH 
do_plot=true; %plotting the average JPSTHs 
plot_all=false; %plotting all JPSTHs
P_thresh=0.05; %threshold for determining of tuning
gauss_filt_std=1; % the std of the gaussian used to smooth the JPSTH
%%
all_comp_jpsth.responsive=zeros(0,0,0);all_comp_jpsth.non_responsive=zeros(0,0,0);
comp_jpsth_cath=cell(3,3); %cathegorized JPSTHs
for ii=1:3
    for jj=1:3
        comp_jpsth_cath{ii,jj}=zeros((Tmax-Tmin)/bin_size,(Tmax-Tmin)/bin_size,0);
    end
end
    

diagon.responsive=zeros(0,0);diagon.non_responsive=zeros(0,0);
counter.responsive.CTX=0;
counter.non_responsive.CTX=0;
counter.responsive.Thal=0;
counter.non_responsive.Thal=0;
total_cat_count.CTX=zeros(3,1);
total_cat_count.Thal=zeros(3,1);
%%
all_delta_pd=[];
for isess=1:length(table)
    id.CTX=[];id.Thal=[];
    all_mats.CTX={};all_mats.Thal={};
    all_PD.CTX=[]; all_PD.Thal=[];
    PDsig.CTX=[]; PDsig.Thal=[];
    RespDirect.CTX=[]; RespDirect.Thal=[];
    RespSig.CTX=[]; RespSig.Thal=[];

    
    
    % creating a list of thalamic and cortical units, responsive and
    % non-responisve sites.
    for iunit=1:length(table(isess).sp)
        this_unit=table(isess).sp(iunit).id;
        location = table(isess).sp(iunit).loc;
        if table(isess).sp(iunit).resp
            res_field = 'responsive';
        else
            res_field = 'non_responsive';
        end
        %         try
        %             [all_mats.(location){end+1}, all_pst.(location){end+1}, all_N.(location){end+1}] = ...
        %                 extract_PST_mat( table, isess, iunit, PDmin, PDmax, Tmin, Tmax, ev2take);
        [all_mats.(location){end+1}, all_PD.(location)(end+1), PDsig.(location)(end+1), RespDirect.(location)(end+1), RespSig.(location)(end+1)] = ... all_pst.(location){end+1}, all_N.(location){end+1}] = ...
        extract_PST_mat_PD_resp( table, isess, iunit, PDmin, PDmax, Tmin, Tmax, ev2take);
        
        
        %         catch
        %             keyboard
        %         end
        id.(location)(end+1)=this_unit;
        counter.(res_field).(location)=counter.(res_field).(location)+1;
    end
    % Running over cortical units
    unit_cat_count.CTX=zeros(length(all_mats.CTX),1);
    unit_cat_count.Thal=zeros(length(all_mats.Thal),1);
    for i_ctx=1:length(all_mats.CTX)
        for i_thal=1:length(all_mats.Thal)
            
            [ctx_mat,thal_mat]=get_non_NaN_trials(all_mats.CTX{i_ctx}',all_mats.Thal{i_thal}');
            %exclusion criteria: one of the spike trains is empty, f.r.
            %smaller than min_fr, less than min_trial_num
            if isempty(ctx_mat) || isempty(thal_mat) || ...
                    sum(thal_mat(:))/length(thal_mat(:))*1000 < min_fr || sum(ctx_mat(:))/length(ctx_mat(:))*1000 < min_fr || ...
                    size(ctx_mat,2)< min_trial_num
                continue
            end
            
            ctx_cath=get_gathegory(PDsig.CTX(i_ctx)<P_thresh,RespSig.CTX(i_ctx)<P_thresh);
            thal_cath=get_gathegory(PDsig.Thal(i_thal)<P_thresh,RespSig.Thal(i_thal)<P_thresh);
            if unit_cat_count.CTX(i_ctx)==0;
                unit_cat_count.CTX(i_ctx)=ctx_cath;
            end
            if unit_cat_count.Thal(i_thal)==0;
                unit_cat_count.Thal(i_thal)=thal_cath;
            end
            
            [res, shift_predict, psth_pred, surprise_mat, std_mat ] =  my_JPSTH(ctx_mat, thal_mat, bin_size,gauss_filt_std); %note that the function also smoothes (gaussian filter) the matrices
            this_JPSTH_filt=gauss_filt_2d (res-psth_pred,gauss_filt_std); %The substracted matrix is also smoothed
            all_comp_jpsth.(res_field)(:,:,end+1)=this_JPSTH_filt;
            diagon.(res_field)(:,end+1)=diag(this_JPSTH_filt);
            comp_jpsth_cath{ctx_cath,thal_cath}(:,:,end+1)=this_JPSTH_filt;
            if ctx_cath==1 && thal_cath==1
                all_delta_pd(end+1)=all_PD.CTX(i_ctx)-all_PD.Thal(i_thal);
            end
            
            
            if plot_all && strcmp(res_field,'responsive')
                plot_JPST(ctx_mat,thal_mat,res,psth_pred,std_mat,Tmin,Tmax,bin_size, gauss_filt_std);
                strng=['sess-' table(isess).fnm ' CTX-' num2str(id.CTX(i_ctx)) ' Thal-' num2str(id.Thal(i_thal)) '  ' num2str(size(ctx_mat,2)) ' trials ' res_field];
                suptitle(strng)
                file_dest=[output_dir strng];
                saveas(gca,file_dest,'jpg')
            end
            %             pause
            
        end
        
        
    end
    
    
    total_cat_count
end
save([output_dir 'all_jpsth'],'all_comp_jpsth','diagon');
%%
cath_names{1}='Tuned';cath_names{2}='Responsive';cath_names{3}='Flat';
t=[Tmin+bin_size/2:bin_size:Tmax-bin_size/2]/1000;
tt=t(1):(t(2)-t(1))/2:t(end);
if do_plot
    f1=figure;f2=figure;f3=figure;
    for ctx_cath=1:size(comp_jpsth_cath,1)
        for thal_cath=1:size(comp_jpsth_cath,2)
            figure(f1);
            %             subplot(size(comp_jpsth_cath,1),size(comp_jpsth_cath,2),sub2ind(size(comp_jpsth_cath),ctx_cath,thal_cath));
            my_subplot(size(comp_jpsth_cath),ctx_cath,thal_cath)
            this_mean_jpsth = mean(comp_jpsth_cath{ctx_cath,thal_cath},3);
            if isempty(this_mean_jpsth)
                continue
            end
            pcolor(t,t,this_mean_jpsth);
            caxis([-0.065 0.065])
            shading flat
            colorbar
            axis equal; axis tight;
            title(sprintf('CTX cells %s, Thal. cells %s, n=%1.0f pairs',...
                cath_names{ctx_cath},cath_names{thal_cath},size(comp_jpsth_cath{ctx_cath,thal_cath},3)));
            xlabel('ctx. time (s)')
            ylabel('thal. time (s)')
            
            figure(f2)
            my_subplot(size(comp_jpsth_cath),ctx_cath,thal_cath)
            plot(tt,sum_2nd_diags(this_mean_jpsth))
            ylim([-0.3 0.4])
            
            figure(f3)
            my_subplot(size(comp_jpsth_cath),ctx_cath,thal_cath)
            plot(t,diag(this_mean_jpsth))
            ylim([-0.05 0.07])
        end
    end
    
    f4=figure;f5=figure;
    
    %running over cortical conditions, w.r.t. entire thalamic population:
    for ctx_cath=1:size(comp_jpsth_cath,1)
        figure(f4);
        all_curr_jpsth = cat(3,comp_jpsth_cath{ctx_cath,:});
        my_subplot(size(comp_jpsth_cath),ctx_cath,1)
        this_mean_jpsth = mean(all_curr_jpsth,3);
        pcolor(t,t,this_mean_jpsth);
        caxis([-0.065 0.065])
        shading flat
        colorbar
        axis equal; axis tight;
        title(sprintf('CTX cells %s, All thalamic conditions, n=%1.0f pairs',...
            cath_names{ctx_cath},size(all_curr_jpsth,3)));
        xlabel('ctx. time (s)')
        ylabel('thal. time (s)')
        
    end
    
    for thal_cath=1:size(comp_jpsth_cath,2)
        figure(f5);
        all_curr_jpsth=cat(3,comp_jpsth_cath{:,thal_cath});
        my_subplot(size(comp_jpsth_cath),1,thal_cath)
        this_mean_jpsth = mean(all_curr_jpsth,3);
        pcolor(t,t,this_mean_jpsth);
        caxis([-0.065 0.065])
        shading flat
        colorbar
        axis equal; axis tight;
        title(sprintf('All cortical conditions, thalamus cells %s, n=%1.0f pairs',...
            cath_names{thal_cath},size(all_curr_jpsth,3)));
        xlabel('ctx. time (s)')
        ylabel('thal. time (s)')
        
        
    end
    

end %if do_plot


figure(f2)
suptitle('Sum of the 2^n^d diagonals')

figure(f3)
suptitle('Diagonals')


keyboard
%%
close all

load([output_dir 'all_jpsth'])
figure(1)
t=[Tmin+bin_size/2:bin_size:Tmax-bin_size/2]/1000;
% mean_jpsth_resp=mean(all_comp_jpsth.responsive,3);
% mean_jpsth_no_resp=mean(all_comp_jpsth.non_responsive,3);
% sem_jpsth_resp=std(all_comp_jpsth.responsive,[],3)/sqrt(size(all_comp_jpsth.responsive,3));
% sem_jpsth_no_resp=std(all_comp_jpsth.non_responsive,[],3)/sqrt(size(all_comp_jpsth.non_responsive,3));

mean_jpsth_resp=var((all_comp_jpsth.responsive),[],3);
mean_jpsth_no_resp=var((all_comp_jpsth.non_responsive),[],3);
sem_jpsth_resp=std(all_comp_jpsth.responsive,[],3)/sqrt(size(all_comp_jpsth.responsive,3));
sem_jpsth_no_resp=std(all_comp_jpsth.non_responsive,[],3)/sqrt(size(all_comp_jpsth.non_responsive,3));

mean_jpsth_resp_diag=diag(mean_jpsth_resp);
mean_jpsth_no_resp_diag=diag(mean_jpsth_no_resp);
sem_jpsth_resp_diag=diag(sem_jpsth_resp);
sem_jpsth_no_resp_diag=diag(sem_jpsth_no_resp);

caxis_val(1)=min([mean_jpsth_resp(:) ; mean_jpsth_no_resp(:)]);
caxis_val(2)=max([mean_jpsth_resp(:) ; mean_jpsth_no_resp(:)]);

subplot(2,2,1)
pcolor(t,t,mean_jpsth_resp)
hold on

plot([0 0],[-1 1],'--k',[-1 1],[0 0] ,'--k','LineWidth',2)
shading flat
colorbar
xlabel('CTX. time (s)')
ylabel('Thal. time (s)')
title('Mean JPSTH of SCP responsive areas')
axis square
caxis(caxis_val)
text(2.4,0,'spikes^2/s^2','Rotation',90,'HorizontalAlignment','center')

subplot(2,2,2)
pcolor(t,t,mean_jpsth_no_resp)
hold on
plot([0 0],[-1 1],'--k',[-1 1],[0 0] ,'--k','LineWidth',2)

shading flat
colorbar
xlabel('CTX. time (s)')
ylabel('Thal. time (s)')
title('Mean JPSTH of SCP non-responsive areas')
axis square
caxis(caxis_val)
text(2.4,0,'spikes^2/s^2','Rotation',90,'HorizontalAlignment','center')

subplot(2,2,3)
errorbar_patch(t,mean_jpsth_resp_diag,sem_jpsth_resp_diag);
title('diagonal of SCP responsive')
axis([-inf inf -.01 .03])

subplot(2,2,4)
errorbar_patch(t,mean_jpsth_no_resp_diag,sem_jpsth_no_resp_diag);
title('diagonal of SCP non-responsive')
axis([-inf inf -.01 .03])
saveas(gca,[output_dir 'mean_jpsth.eps'],'psc2')
% iunit=7;isess=1;
%
% all_unit_mats{iunit}= extract_PST_mat( table, isess, iunit, PDmin, PDmax, Tmin, Tmax, ev2take);
%%
figure(2)

scp_resp=fieldnames(diagon);
for ii=1:2
    subplot(2,2,ii)
    plot(t,mean(abs(diagon.(scp_resp{ii})),2))
    xlabel('time(s)')
    ylabel('spike^2')
    title(['mean of rectified JPSTH diagonal , ' scp_resp{ii}])
end

for ii=1:2
    % 	lill_p=zeros(1,size(diagon.(scp_resp{ii}),1));
    subplot(2,2,ii+2)
    plot(t,mad(diagon.(scp_resp{ii}),1,2))
    xlabel('time(s)')
    ylabel('spike^2')
    title(['MAD of JPSTH diagonal ' scp_resp{ii}])
end
saveas(gca,[output_dir 'diagonal_jpsth_variability'],'jpg')


%%
t_cut_edges=[-100 300]/1000;
t_cut_ixs = t>=t_cut_edges(1) & t<=t_cut_edges(2);
t_cut = t(t_cut_ixs);
figure(3);clf;
n_mads=3;
caxis_val=[-0.4,0.4];
for ii=1
    cut_jpsth=diagon.(scp_resp{ii})(t_cut_ixs,:);
    sum_cut_jpsth.(scp_resp{ii})=sum(cut_jpsth);
    median_sum=median(sum_cut_jpsth.(scp_resp{ii}));
    mad_sum=mad(sum_cut_jpsth.(scp_resp{ii}),1);
    [histogram hist_ixs]=hist(sum_cut_jpsth.(scp_resp{ii}),35);
    
    
    %fitting gaussian
    fo_ = fitoptions('method','NonlinearLeastSquares','Lower',[-Inf -Inf    0]);
    ft_ = fittype('gauss1');
    cf_ = fit(hist_ixs',histogram',ft_,fo_);
    
    figure(ii*2+1)
    clf
    % 	subplot(1,2,ii)
    hold on
    bar(hist_ixs,histogram)
    yl=ylim;
    plot(cf_,'fit')
    
    plot(median_sum*ones(1,2),[0 yl(2)],'k',...
        +mad_sum*n_mads+median_sum*ones(1,2),[0 yl(2)],'--k',...
        -mad_sum*n_mads+median_sum*ones(1,2),[0 yl(2)],'--k','LineWidth',4)
    xlim([-inf inf])
    
    
    set(gca,'FontSize',15)%,'LineWidth',3)
    
    % 	title(['sum JPSTH between ' num2str(t_cut_edges(1)*1000) ' and ' num2str(t_cut_edges(2)*1000)  ' msec. ' scp_resp{ii}])
    
    xlabel('spikes^2')
    ylabel('number of pairs')
    % 	if ii==2
    legend('Histogram','Gaussian Fit','Median',['Median +/- ' num2str(n_mads) ' mads'],'location','NorthEast')
    % 	end
    
    figure(4);
    clf
    low_dev_ixs=sum_cut_jpsth.(scp_resp{ii}) < (-mad_sum*n_mads+median_sum);
    high_dev_ixs=sum_cut_jpsth.(scp_resp{ii}) > (mad_sum*n_mads+median_sum);
    
    low_dev_jpsth=mean(all_comp_jpsth.(scp_resp{ii})(:,:,low_dev_ixs),3);
    high_dev_jpsth=mean(all_comp_jpsth.(scp_resp{ii})(:,:,high_dev_ixs),3);
    subplot(1,2,ii*2-1)
    pcolor(t,t,low_dev_jpsth)
    hold on
    plot([0 0],[-1 1],'--k',[-1 1],[0 0] ,'--k','LineWidth',2)
    
    shading flat
    axis square
    title(['JPSTH of low deviant, ' scp_resp{ii}] )
    colorbar
    % 	axis([-inf,inf,-inf,inf])
    
    caxis(caxis_val)
    xlabel('CTX. time (s)')
    ylabel('Thal. time (s)')
    text(1.6,0,'spikes^2/s^2','Rotation',90,'HorizontalAlignment','center')
    
    
    subplot(1,2,ii*2)
    pcolor(t,t,high_dev_jpsth)
    hold on
    plot([0 0],[-1 1],'--k',[-1 1],[0 0] ,'--k','LineWidth',2)
    
    shading flat
    axis square
    title(['JPSTH of high deviant, ' scp_resp{ii}] )
    colorbar
    % 	axis([-inf,inf,-inf,inf])
    
    caxis(caxis_val)
    xlabel('CTX. time (s)')
    ylabel('Thal. time (s)')
    text(1.6,0,'spikes^2/s^2','Rotation',90,'HorizontalAlignment','center')
    
    
end
%%
figure(3)
saveas(gca,[output_dir 'cut_vec_distrib.eps'],'psc2')

figure(4)
saveas(gca,[output_dir 'deviant_mean_jpsth.eps'],'psc2')

%%

% [h,p]=kstest2(sum_cut_jpsth.non_responsive,sum_cut_jpsth.responsive)
% % [h,p]=lillietest(sum_cut_jpsth.responsive,[],[],1e-4)
% % [h,p]=lillietest(sum_cut_jpsth.non_responsive,[],[],1e-4)
% [h,p]=chi2gof(sum_cut_jpsth.responsive)
% [h,p]=chi2gof(sum_cut_jpsth.non_responsive)

